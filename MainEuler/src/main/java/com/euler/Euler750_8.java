package com.euler;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

public class Euler750_8 {
	private final static int N=976;
	
	private static class ArrayWrapper	{
		public final int[] array;
		public ArrayWrapper(int[] array)	{
			this.array=array;
		}
		@Override
		public int hashCode()	{
			return Arrays.hashCode(array);
		}
		@Override
		public boolean equals(Object other)	{
			ArrayWrapper awOther=(ArrayWrapper)other;
			return Arrays.equals(array,awOther.array);
		}
	}
	
	private static class CardArrangementMutator	{
		public final int[] cards;
		public final int[] positions;
		public final int[] tmpLowCard;
		public final int[] tmpReversePos;
		/*
		 * "currentArrangement" is a shuffle of the N-1 numbers between 0 and N-2. First we move the card with number currentArrangement[0] to
		 * whichever place currentArrangement[0]+1 is, then we move the card with number currentArrangement[1] to the position of
		 * currentArrangement[1]+1, etc.
		 */
		public CardArrangementMutator(int size)	{
			cards=new int[size];
			positions=new int[size];
			int p=1;
			int mod=size+1;
			for (int i=0;i<size;++i)	{
				p*=3;
				p%=mod;
				cards[i]=p-1;
				positions[p-1]=i;
			}
			tmpLowCard=new int[size];
			tmpReversePos=new int[size];
		}
		public int[] getInitialArrangement()	{
			int[] result=new int[cards.length-1];
			for (int i=0;i<result.length;++i) result[i]=i;
			return result;
		}
		public int[] mutate2(int[] currentArrangement,int p1,int p2)	{
			int[] result=Arrays.copyOf(currentArrangement,currentArrangement.length);
			int swap=result[p1];
			result[p1]=result[p2];
			result[p2]=swap;
			return result;
		}
		public int[] mutateAlternate(int[] currentArrangement,int p1,int p2,int p3)	{
			int len1=p2-p1;
			int len2=p3-p2;
			int finalLen=currentArrangement.length-p3;
			int[] result=new int[currentArrangement.length];
			System.arraycopy(currentArrangement,0,result,0,p1);
			System.arraycopy(currentArrangement,p2,result,p1,len2);
			System.arraycopy(currentArrangement,p1,result,p1+len2,len1);
			System.arraycopy(currentArrangement,p3,result,p3,finalLen);
			return result;
		}
		public int[] mutateRandom(int[] currentArrangement,Random r)	{
			if (r.nextBoolean())	{
				int n=r.nextInt(40)+2;
				return mutate(currentArrangement,getNonEqualNumbers(currentArrangement.length,n,r));
			}	else	{
				int[] ps=getNonEqualNumbers(currentArrangement.length,3,r);
				Arrays.sort(ps);
				return mutateAlternate(currentArrangement,ps[0],ps[1],ps[2]);
			}
		}
		public int[] mutate(int[] currentArrangement,int[] ps)	{
			int[] result=Arrays.copyOf(currentArrangement,currentArrangement.length);
			int swap=result[ps[0]];
			for (int i=1;i<ps.length;++i) result[ps[i-1]]=result[ps[i]];
			result[ps[ps.length-1]]=swap;
			return result;
		}
		private static int[] getNonEqualNumbers(int size,int n,Random r)	{
			int[] result=new int[n];
			for (int i=0;i<n;++i)	{
				for (;;)	{
					result[i]=r.nextInt(size);
					boolean canContinue=true;
					for (int j=0;j<i;++j) if (result[i]==result[j])	{
						canContinue=false;
						break;
					}
					if (canContinue) break;
				}
			}
			return result;
		}
		public int getCost(int[] arrangement)	{
			System.arraycopy(cards,0,tmpLowCard,0,cards.length);
			System.arraycopy(positions,0,tmpReversePos,0,positions.length);
			int result=0;
			for (int i=0;i<arrangement.length;++i)	{
				int currentCard=arrangement[i];
				int nextCard=1+currentCard;
				int currentPos=positions[currentCard];
				int nextPos=tmpReversePos[nextCard];
				result+=Math.abs(nextPos-currentPos);
				int lowerMovedCard=tmpLowCard[currentPos];
				tmpLowCard[nextPos]=lowerMovedCard;
				tmpReversePos[lowerMovedCard]=nextPos;
			}
			return result;
		}
	}
	
	public static class Population	{
		public final int maxSize;
		public final Map<ArrayWrapper,Integer> population;	// Used for direct queries and to cache cost.
		public final List<ArrayWrapper> sortedPopulation;	// Used for random access and for culling.
		private final Comparator<ArrayWrapper> comparator;
		public Population(int maxSize)	{
			this.maxSize=maxSize;
			population=new HashMap<>();
			sortedPopulation=new ArrayList<>();
			comparator=Comparator.comparingInt(population::get);
		}
		public int[] getRandomElement(Random r)	{
			return sortedPopulation.get(r.nextInt(sortedPopulation.size())).array;
		}
		public int getBestCost()	{
			return population.get(sortedPopulation.get(0));
		}
		public void insert(int[] element,int cost)	{
			ArrayWrapper wrapped=new ArrayWrapper(element);
			if (population.containsKey(wrapped)) return;
			population.put(wrapped,cost);
			int position=Collections.binarySearch(sortedPopulation,wrapped,comparator);
			if (position<0) position=-1-position;
			sortedPopulation.add(position,wrapped);
			while (sortedPopulation.size()>maxSize)	{
				ArrayWrapper toDelete=sortedPopulation.get(sortedPopulation.size()-1);
				population.remove(toDelete);
				sortedPopulation.remove(sortedPopulation.size()-1);
			}
		}
		public String getBestElement()	{
			return Arrays.toString(sortedPopulation.get(0).array);
		}
	}
	
	public static void main(String[] args)	{
		CardArrangementMutator mutator=new CardArrangementMutator(N);
		Population population=new Population(500);
		Random r=new Random();
		boolean startFromScratch=false;
		if (startFromScratch)	{
			int[] initialArrangement=mutator.getInitialArrangement();
			int cost=mutator.getCost(initialArrangement);
			population.insert(initialArrangement,cost);
		}	else	{
			//167338
			//int[] starting=new int[] {246, 45, 499, 754, 181, 97, 573, 924, 133, 798, 187, 369, 466, 963, 158, 143, 242, 390, 420, 641, 730, 295, 291, 100, 249, 225, 451, 962, 674, 838, 417, 21, 103, 74, 51, 476, 620, 139, 600, 177, 633, 943, 414, 43, 44, 189, 716, 276, 682, 70, 485, 285, 5, 260, 667, 480, 403, 265, 218, 761, 644, 898, 19, 569, 406, 617, 746, 84, 286, 509, 237, 71, 72, 326, 153, 261, 681, 408, 595, 89, 80, 81, 785, 442, 441, 450, 18, 275, 954, 37, 965, 91, 268, 83, 892, 818, 698, 475, 122, 439, 293, 566, 151, 90, 764, 833, 164, 107, 316, 213, 368, 64, 654, 46, 370, 872, 735, 352, 400, 923, 88, 819, 92, 4, 434, 853, 737, 3, 339, 354, 678, 96, 725, 120, 280, 474, 53, 469, 270, 443, 790, 808, 837, 728, 532, 313, 6, 125, 245, 154, 470, 182, 664, 176, 15, 688, 425, 302, 879, 264, 353, 631, 560, 484, 312, 461, 78, 584, 358, 817, 222, 82, 274, 377, 524, 175, 54, 26, 190, 198, 699, 132, 415, 865, 193, 255, 549, 538, 438, 93, 162, 807, 23, 530, 897, 239, 715, 588, 483, 547, 228, 296, 267, 635, 431, 407, 840, 217, 279, 224, 344, 388, 259, 269, 376, 792, 791, 501, 944, 769, 283, 99, 517, 607, 768, 561, 823, 216, 926, 333, 282, 845, 643, 251, 102, 581, 42, 871, 906, 625, 508, 108, 343, 307, 186, 250, 786, 330, 238, 12, 304, 447, 334, 673, 435, 202, 782, 689, 371, 488, 121, 14, 393, 271, 539, 272, 266, 309, 147, 959, 820, 357, 914, 273, 973, 263, 796, 804, 430, 613, 382, 458, 546, 332, 65, 119, 479, 131, 687, 652, 142, 104, 287, 686, 170, 670, 201, 486, 680, 41, 968, 916, 523, 813, 126, 619, 929, 864, 781, 418, 233, 85, 375, 972, 169, 948, 835, 676, 401, 180, 713, 675, 351, 875, 215, 340, 364, 161, 648, 178, 505, 328, 878, 609, 589, 831, 386, 220, 598, 58, 457, 39, 904, 86, 931, 329, 214, 374, 714, 199, 940, 277, 576, 77, 188, 428, 867, 577, 572, 933, 244, 241, 551, 525, 723, 223, 381, 226, 203, 363, 160, 618, 422, 197, 138, 565, 471, 437, 378, 379, 405, 886, 110, 227, 412, 759, 745, 290, 350, 349, 355, 356, 494, 893, 925, 234, 697, 183, 587, 252, 632, 738, 597, 860, 427, 423, 256, 124, 852, 586, 922, 712, 200, 232, 165, 465, 243, 262, 248, 419, 531, 310, 395, 454, 733, 76, 432, 492, 453, 118, 903, 704, 493, 616, 195, 552, 513, 184, 109, 35, 946, 98, 196, 294, 542, 123, 526, 696, 721, 541, 579, 455, 421, 921, 662, 556, 456, 95, 722, 844, 866, 553, 7, 179, 385, 111, 34, 720, 621, 891, 788, 585, 540, 950, 323, 803, 75, 522, 174, 642, 452, 278, 608, 33, 48, 73, 651, 622, 969, 612, 863, 482, 32, 459, 974, 11, 537, 69, 348, 661, 79, 695, 236, 173, 606, 171, 942, 521, 185, 706, 28, 520, 605, 134, 543, 373, 347, 902, 140, 87, 477, 732, 163, 362, 559, 148, 101, 29, 317, 342, 669, 319, 591, 533, 341, 709, 536, 806, 765, 535, 372, 885, 685, 814, 961, 583, 172, 367, 544, 665, 832, 663, 129, 361, 557, 168, 192, 660, 359, 629, 649, 413, 705, 166, 30, 389, 877, 934, 507, 545, 890, 416, 22, 404, 127, 841, 489, 812, 47, 700, 462, 411, 596, 592, 17, 167, 380, 383, 784, 303, 590, 672, 429, 593, 467, 626, 582, 736, 396, 298, 137, 534, 502, 208, 444, 113, 653, 240, 825, 666, 771, 402, 630, 604, 468, 772, 68, 13, 157, 221, 105, 920, 345, 152, 611, 292, 360, 874, 527, 603, 150, 62, 884, 281, 634, 610, 636, 247, 637, 61, 60, 615, 602, 478, 20, 230, 811, 204, 9, 321, 460, 436, 729, 809, 529, 27, 707, 297, 387, 830, 614, 159, 702, 960, 668, 106, 953, 346, 299, 659, 36, 671, 849, 2, 599, 194, 464, 212, 623, 797, 624, 913, 862, 219, 301, 932, 658, 802, 473, 306, 690, 516, 719, 628, 870, 679, 947, 908, 135, 901, 384, 767, 258, 766, 758, 763, 440, 894, 550, 824, 710, 207, 211, 937, 958, 801, 711, 156, 155, 229, 770, 315, 94, 320, 289, 846, 327, 684, 655, 322, 748, 1, 331, 206, 601, 31, 49, 755, 708, 861, 40, 394, 900, 778, 756, 726, 254, 739, 966, 851, 724, 205, 939, 753, 472, 491, 909, 876, 717, 318, 821, 253, 762, 335, 528, 787, 703, 128, 209, 145, 336, 594, 848, 66, 146, 117, 515, 424, 718, 63, 311, 337, 568, 683, 398, 727, 740, 571, 691, 783, 896, 410, 504, 519, 749, 325, 564, 580, 816, 744, 25, 779, 927, 498, 752, 805, 578, 235, 883, 757, 810, 24, 567, 912, 847, 284, 38, 300, 829, 136, 463, 141, 487, 834, 518, 433, 741, 795, 789, 850, 555, 751, 548, 16, 827, 773, 130, 210, 490, 497, 869, 747, 799, 843, 50, 842, 828, 575, 971, 854, 114, 694, 839, 10, 895, 855, 506, 815, 514, 288, 826, 887, 512, 366, 889, 144, 397, 800, 554, 650, 639, 257, 734, 426, 112, 910, 149, 957, 880, 500, 777, 822, 776, 52, 392, 693, 481, 760, 888, 919, 945, 873, 836, 67, 882, 941, 951, 701, 308, 627, 495, 859, 938, 59, 956, 952, 955, 647, 231, 496, 858, 391, 868, 656, 116, 915, 449, 911, 928, 191, 907, 780, 930, 445, 856, 511, 409, 55, 918, 448, 503, 314, 574, 917, 794, 881, 936, 905, 857, 446, 899, 750, 365, 657, 646, 8, 305, 558, 570, 645, 935, 967, 793, 115, 399, 57, 338, 324, 510, 743, 56, 677, 640, 775, 964, 970, 692, 742, 949, 638, 731, 563, 562, 0, 774};
			//167356
			//int[] starting=new int[] {170, 785, 21, 664, 799, 181, 474, 698, 648, 291, 143, 748, 776, 933, 840, 12, 333, 473, 494, 870, 123, 461, 809, 113, 114, 510, 728, 950, 236, 422, 434, 867, 817, 264, 968, 914, 425, 230, 80, 939, 672, 78, 242, 431, 569, 245, 70, 36, 96, 293, 377, 633, 520, 307, 285, 973, 695, 133, 364, 759, 153, 173, 255, 605, 560, 164, 737, 706, 702, 524, 724, 84, 189, 202, 609, 229, 205, 5, 946, 194, 304, 631, 76, 400, 295, 403, 6, 796, 887, 249, 704, 943, 208, 715, 688, 746, 551, 665, 182, 725, 937, 480, 423, 572, 875, 878, 177, 68, 639, 951, 398, 23, 95, 309, 674, 532, 576, 417, 365, 393, 571, 193, 920, 538, 368, 566, 4, 934, 511, 451, 659, 682, 283, 577, 584, 233, 479, 640, 641, 800, 358, 908, 17, 598, 388, 492, 43, 705, 215, 721, 501, 854, 217, 860, 112, 472, 972, 270, 442, 134, 162, 421, 658, 213, 28, 380, 556, 957, 389, 866, 45, 621, 296, 169, 974, 88, 841, 509, 53, 51, 62, 349, 687, 83, 821, 313, 827, 938, 118, 913, 424, 530, 355, 786, 909, 713, 956, 237, 414, 892, 655, 622, 549, 326, 657, 395, 486, 50, 865, 386, 969, 441, 330, 686, 505, 372, 714, 709, 469, 565, 357, 649, 756, 531, 344, 71, 327, 607, 268, 656, 312, 122, 552, 458, 944, 74, 488, 681, 286, 843, 81, 833, 849, 485, 41, 142, 523, 813, 795, 107, 39, 512, 102, 581, 332, 220, 942, 642, 24, 239, 171, 758, 652, 72, 502, 176, 69, 822, 75, 180, 635, 214, 280, 100, 924, 64, 276, 906, 44, 864, 561, 376, 154, 654, 105, 272, 804, 99, 769, 863, 290, 697, 493, 385, 161, 216, 570, 842, 429, 963, 325, 874, 396, 826, 292, 151, 848, 225, 454, 732, 638, 160, 321, 738, 482, 856, 443, 947, 847, 3, 852, 904, 945, 319, 234, 608, 869, 587, 916, 251, 948, 499, 450, 42, 660, 745, 101, 282, 912, 597, 620, 310, 798, 221, 260, 470, 651, 926, 111, 518, 119, 707, 604, 579, 82, 899, 22, 923, 29, 862, 352, 568, 537, 471, 147, 689, 720, 764, 903, 240, 26, 263, 11, 206, 685, 629, 557, 104, 632, 131, 710, 316, 719, 513, 261, 792, 668, 768, 925, 820, 929, 891, 195, 363, 158, 47, 361, 542, 439, 408, 462, 65, 718, 508, 370, 927, 810, 844, 35, 378, 630, 87, 483, 145, 616, 873, 412, 324, 413, 275, 411, 915, 525, 466, 767, 595, 367, 468, 750, 204, 481, 183, 671, 401, 547, 868, 402, 623, 591, 694, 387, 667, 514, 578, 85, 910, 165, 794, 187, 808, 816, 823, 98, 564, 196, 831, 331, 339, 911, 259, 130, 507, 366, 354, 97, 129, 729, 797, 498, 7, 647, 693, 634, 890, 103, 835, 382, 61, 128, 306, 883, 606, 600, 636, 637, 615, 893, 190, 922, 628, 157, 526, 861, 541, 971, 784, 362, 690, 575, 418, 66, 825, 452, 828, 150, 302, 735, 289, 343, 533, 353, 410, 955, 771, 478, 477, 723, 238, 666, 125, 394, 342, 137, 311, 596, 351, 120, 921, 614, 832, 553, 722, 592, 744, 811, 397, 644, 465, 27, 340, 546, 519, 241, 742, 765, 37, 919, 308, 599, 226, 905, 941, 839, 830, 497, 928, 192, 315, 250, 79, 144, 341, 627, 52, 175, 643, 60, 907, 766, 898, 954, 350, 645, 902, 267, 218, 40, 384, 731, 803, 256, 38, 34, 172, 356, 33, 573, 708, 163, 484, 882, 184, 63, 692, 555, 232, 680, 149, 379, 703, 736, 197, 32, 959, 409, 438, 543, 212, 777, 428, 701, 46, 965, 554, 186, 407, 727, 383, 894, 453, 900, 369, 126, 775, 141, 739, 676, 673, 2, 476, 201, 812, 420, 375, 559, 392, 838, 895, 774, 536, 931, 807, 782, 1, 712, 274, 108, 872, 426, 8, 252, 495, 500, 110, 751, 763, 168, 594, 127, 932, 166, 31, 298, 529, 574, 25, 281, 20, 449, 889, 139, 135, 16, 496, 780, 244, 772, 930, 77, 773, 953, 328, 94, 535, 539, 419, 269, 684, 188, 459, 491, 228, 877, 209, 167, 391, 740, 19, 881, 558, 871, 445, 159, 503, 132, 952, 30, 235, 770, 136, 888, 490, 762, 198, 138, 663, 761, 962, 880, 203, 886, 837, 13, 940, 793, 778, 550, 178, 156, 152, 653, 288, 896, 851, 749, 115, 734, 58, 329, 320, 522, 711, 191, 966, 323, 9, 265, 415, 567, 124, 534, 675, 504, 148, 779, 961, 548, 791, 460, 757, 781, 879, 897, 489, 515, 626, 262, 601, 444, 287, 210, 93, 859, 760, 0, 662, 279, 219, 960, 475, 301, 678, 545, 254, 593, 179, 586, 590, 885, 741, 790, 517, 86, 348, 679, 752, 10, 446, 200, 467, 850, 806, 717, 918, 253, 580, 824, 917, 48, 753, 73, 661, 670, 588, 273, 625, 829, 857, 562, 613, 140, 109, 106, 15, 390, 430, 67, 406, 516, 334, 347, 936, 299, 121, 258, 92, 294, 646, 359, 322, 589, 619, 18, 582, 845, 788, 243, 360, 440, 506, 59, 602, 683, 318, 207, 603, 248, 345, 858, 335, 374, 487, 802, 284, 91, 726, 521, 57, 585, 381, 846, 257, 624, 836, 89, 618, 271, 373, 300, 266, 677, 801, 754, 457, 117, 371, 231, 90, 814, 805, 967, 527, 432, 669, 297, 427, 247, 346, 610, 884, 399, 435, 700, 747, 404, 716, 855, 691, 730, 211, 222, 314, 49, 278, 155, 416, 246, 116, 56, 696, 699, 55, 935, 464, 54, 949, 958, 338, 337, 303, 650, 733, 224, 405, 876, 305, 901, 964, 755, 617, 789, 277, 743, 787, 436, 819, 612, 448, 199, 317, 853, 433, 185, 540, 336, 528, 834, 146, 463, 437, 544, 970, 174, 818, 447, 456, 563, 227, 223, 455, 815, 14, 583, 783, 611};
			//167935
			//int[] starting=new int[] {406, 530, 654, 965, 344, 809, 810, 458, 852, 771, 748, 118, 162, 434, 293, 113, 125, 123, 375, 476, 475, 89, 378, 114, 653, 305, 505, 62, 347, 398, 804, 716, 785, 772, 693, 647, 292, 499, 47, 119, 884, 88, 858, 103, 461, 659, 374, 474, 566, 968, 543, 538, 664, 776, 688, 469, 465, 916, 316, 26, 709, 556, 682, 5, 873, 370, 195, 948, 674, 355, 151, 833, 61, 655, 139, 120, 764, 529, 827, 161, 689, 388, 728, 157, 690, 408, 352, 631, 495, 961, 242, 769, 477, 302, 105, 872, 768, 283, 478, 840, 307, 613, 565, 64, 462, 215, 972, 117, 492, 339, 364, 102, 365, 74, 393, 786, 903, 268, 246, 633, 617, 60, 504, 591, 473, 150, 544, 971, 328, 170, 93, 588, 545, 924, 65, 319, 803, 326, 233, 4, 17, 737, 245, 609, 841, 313, 600, 790, 126, 782, 859, 470, 66, 104, 12, 665, 183, 823, 517, 537, 213, 966, 482, 494, 843, 838, 733, 218, 107, 730, 54, 428, 560, 363, 55, 358, 498, 923, 230, 808, 182, 164, 831, 471, 818, 464, 512, 122, 516, 97, 173, 599, 732, 196, 759, 267, 796, 3, 16, 899, 750, 536, 687, 542, 576, 746, 745, 438, 400, 437, 41, 694, 417, 389, 765, 87, 184, 260, 149, 606, 412, 333, 63, 860, 37, 58, 165, 702, 369, 798, 203, 270, 194, 225, 676, 925, 68, 290, 330, 704, 595, 937, 80, 862, 96, 883, 169, 309, 557, 724, 837, 317, 589, 969, 381, 483, 584, 729, 451, 967, 488, 124, 813, 832, 727, 681, 414, 407, 340, 70, 193, 842, 236, 289, 421, 156, 960, 673, 376, 706, 830, 524, 940, 202, 386, 811, 208, 684, 201, 312, 261, 751, 735, 879, 435, 577, 224, 908, 481, 812, 392, 652, 200, 845, 21, 587, 171, 826, 627, 646, 561, 721, 612, 510, 255, 207, 914, 715, 143, 295, 569, 343, 425, 663, 797, 403, 264, 145, 792, 535, 955, 639, 596, 131, 459, 867, 6, 153, 280, 805, 523, 525, 620, 418, 28, 337, 234, 962, 180, 329, 380, 450, 658, 142, 187, 251, 276, 555, 35, 405, 112, 526, 452, 551, 734, 959, 493, 327, 605, 662, 249, 206, 345, 454, 892, 315, 795, 239, 700, 46, 607, 799, 130, 29, 692, 275, 11, 943, 552, 954, 705, 666, 341, 361, 710, 217, 368, 237, 397, 586, 301, 691, 250, 939, 133, 913, 25, 274, 338, 385, 71, 304, 562, 930, 468, 222, 263, 849, 742, 147, 291, 14, 777, 42, 680, 442, 963, 909, 177, 553, 775, 522, 7, 686, 944, 906, 794, 774, 76, 252, 348, 40, 616, 767, 436, 491, 781, 857, 807, 2, 938, 298, 670, 232, 835, 973, 644, 154, 48, 259, 640, 235, 922, 590, 898, 861, 929, 229, 349, 669, 844, 675, 399, 223, 72, 641, 559, 13, 108, 717, 160, 579, 866, 116, 244, 825, 39, 501, 382, 282, 285, 539, 228, 672, 749, 129, 784, 346, 783, 272, 511, 608, 387, 226, 581, 828, 34, 420, 336, 642, 265, 628, 540, 532, 23, 549, 806, 231, 846, 75, 137, 281, 353, 155, 942, 521, 726, 279, 172, 192, 824, 286, 766, 699, 121, 902, 422, 1, 622, 22, 780, 926, 740, 819, 829, 585, 725, 81, 148, 106, 885, 384, 893, 136, 573, 904, 321, 744, 878, 921, 564, 262, 266, 572, 920, 258, 413, 611, 802, 707, 395, 134, 101, 817, 94, 423, 632, 578, 383, 554, 946, 604, 520, 882, 603, 69, 43, 891, 875, 558, 865, 887, 638, 227, 610, 601, 20, 189, 460, 509, 619, 661, 100, 864, 431, 927, 45, 931, 299, 373, 912, 419, 411, 592, 698, 856, 571, 351, 331, 371, 86, 958, 427, 310, 787, 138, 801, 489, 773, 623, 575, 678, 472, 91, 57, 168, 800, 847, 594, 645, 763, 342, 490, 741, 791, 390, 486, 53, 711, 668, 24, 814, 335, 485, 957, 445, 708, 306, 424, 901, 27, 49, 754, 144, 570, 919, 932, 900, 598, 602, 839, 141, 176, 739, 905, 205, 197, 186, 320, 238, 19, 323, 396, 15, 269, 325, 284, 30, 527, 679, 950, 357, 712, 115, 890, 547, 294, 198, 880, 453, 615, 770, 964, 175, 391, 273, 626, 743, 625, 67, 372, 933, 936, 731, 648, 894, 762, 621, 614, 401, 870, 415, 657, 528, 394, 877, 163, 111, 895, 515, 513, 761, 863, 713, 874, 135, 738, 947, 629, 457, 78, 271, 38, 951, 178, 736, 50, 449, 651, 497, 793, 36, 166, 8, 221, 379, 33, 889, 779, 970, 77, 876, 362, 550, 714, 9, 404, 220, 778, 788, 484, 214, 637, 209, 463, 334, 531, 308, 146, 441, 755, 402, 179, 869, 59, 277, 300, 871, 848, 140, 703, 758, 683, 354, 240, 416, 701, 32, 508, 928, 322, 367, 677, 667, 507, 934, 318, 44, 73, 128, 456, 974, 241, 288, 568, 191, 199, 99, 480, 854, 410, 219, 671, 697, 430, 851, 855, 506, 820, 756, 216, 350, 314, 278, 853, 257, 834, 359, 90, 303, 720, 850, 502, 956, 821, 210, 574, 18, 630, 949, 649, 753, 635, 752, 789, 816, 479, 910, 82, 84, 634, 945, 757, 311, 546, 533, 760, 660, 815, 656, 888, 643, 719, 127, 868, 433, 51, 167, 132, 79, 56, 174, 443, 618, 92, 636, 296, 541, 432, 822, 886, 915, 534, 952, 583, 563, 836, 650, 159, 941, 444, 190, 467, 152, 500, 85, 158, 597, 696, 935, 256, 429, 519, 448, 332, 83, 446, 110, 409, 695, 52, 31, 466, 181, 455, 98, 518, 0, 624, 447, 204, 685, 426, 324, 297, 718, 723, 911, 439, 95, 593, 907, 514, 356, 212, 360, 487, 211, 248, 496, 881, 188, 377, 722, 503, 918, 185, 109, 254, 243, 440, 10, 366, 253, 582, 747, 580, 567, 287, 548, 896, 897, 917, 953, 247};
			//166540
			//int[] starting=new int[] {246, 45, 499, 721, 181, 97, 573, 158, 143, 242, 664, 420, 260, 924, 133, 798, 84, 369, 466, 963, 28, 295, 524, 225, 451, 78, 853, 737, 276, 682, 103, 395, 476, 475, 70, 485, 285, 74, 620, 139, 43, 44, 406, 716, 576, 80, 81, 785, 442, 441, 450, 241, 237, 698, 746, 122, 439, 15, 177, 633, 943, 414, 293, 5, 291, 100, 120, 368, 530, 431, 6, 125, 930, 866, 105, 480, 202, 678, 818, 425, 19, 255, 674, 865, 617, 226, 286, 509, 400, 71, 18, 326, 153, 261, 849, 523, 892, 83, 46, 408, 813, 89, 64, 654, 673, 91, 268, 275, 954, 825, 532, 838, 723, 217, 769, 224, 164, 833, 469, 270, 465, 386, 189, 470, 182, 151, 176, 407, 840, 274, 193, 90, 728, 595, 265, 51, 461, 709, 641, 107, 644, 213, 249, 872, 725, 733, 923, 88, 819, 886, 4, 3, 377, 569, 560, 484, 648, 619, 92, 175, 588, 920, 190, 929, 132, 584, 914, 296, 267, 635, 665, 809, 831, 96, 667, 352, 699, 269, 898, 358, 817, 354, 222, 82, 581, 376, 625, 283, 353, 344, 187, 607, 768, 561, 893, 216, 926, 333, 916, 313, 946, 662, 259, 808, 867, 525, 282, 845, 488, 251, 538, 438, 681, 162, 239, 688, 600, 145, 228, 264, 99, 631, 339, 823, 334, 87, 330, 238, 321, 782, 351, 434, 350, 65, 14, 670, 879, 215, 208, 748, 131, 841, 271, 539, 272, 266, 965, 435, 102, 147, 796, 479, 549, 316, 458, 953, 121, 422, 180, 119, 837, 820, 357, 375, 754, 273, 715, 483, 343, 307, 42, 871, 579, 944, 108, 309, 738, 186, 250, 233, 104, 287, 170, 613, 263, 161, 542, 417, 968, 864, 973, 498, 875, 7, 304, 781, 418, 676, 972, 252, 643, 396, 201, 908, 412, 169, 401, 854, 41, 200, 948, 835, 735, 85, 937, 290, 925, 234, 697, 860, 505, 874, 328, 609, 589, 86, 492, 689, 23, 364, 220, 598, 713, 415, 457, 280, 183, 68, 675, 329, 214, 374, 714, 199, 940, 178, 547, 184, 245, 566, 198, 577, 456, 188, 218, 53, 223, 129, 597, 428, 804, 680, 587, 203, 452, 427, 495, 110, 531, 365, 48, 21, 126, 124, 565, 437, 378, 379, 405, 632, 508, 244, 454, 722, 382, 77, 687, 652, 58, 340, 618, 927, 759, 745, 243, 790, 349, 355, 356, 494, 12, 138, 430, 165, 962, 443, 870, 310, 294, 419, 76, 432, 171, 9, 755, 453, 118, 903, 704, 852, 551, 363, 197, 79, 792, 493, 616, 195, 552, 513, 277, 109, 586, 390, 98, 196, 72, 950, 160, 279, 436, 123, 526, 388, 696, 262, 541, 35, 695, 556, 95, 933, 844, 370, 111, 34, 814, 621, 629, 179, 39, 474, 786, 706, 540, 846, 803, 642, 522, 174, 157, 608, 75, 302, 33, 931, 758, 651, 622, 486, 612, 863, 429, 11, 537, 69, 348, 661, 371, 764, 236, 173, 553, 606, 847, 521, 423, 148, 730, 256, 520, 605, 134, 543, 373, 702, 765, 292, 347, 902, 591, 204, 732, 163, 185, 154, 559, 585, 101, 686, 878, 29, 342, 669, 319, 501, 533, 341, 805, 536, 806, 611, 535, 372, 230, 685, 720, 961, 583, 922, 712, 172, 367, 544, 663, 381, 361, 557, 168, 192, 791, 140, 660, 26, 278, 152, 897, 974, 359, 385, 649, 413, 37, 166, 30, 389, 877, 403, 891, 459, 934, 507, 529, 890, 416, 22, 404, 137, 626, 212, 653, 127, 393, 471, 489, 812, 47, 700, 462, 411, 360, 596, 592, 17, 167, 380, 383, 692, 690, 942, 590, 672, 570, 593, 467, 534, 582, 477, 312, 298, 478, 20, 482, 227, 320, 572, 729, 240, 959, 666, 421, 444, 113, 317, 66, 736, 771, 402, 630, 604, 468, 778, 756, 772, 16, 13, 345, 788, 885, 705, 221, 527, 603, 150, 62, 884, 281, 634, 61, 60, 753, 502, 876, 610, 636, 247, 637, 862, 615, 602, 832, 707, 297, 387, 655, 614, 159, 32, 960, 668, 726, 254, 739, 966, 258, 766, 761, 763, 440, 894, 550, 824, 710, 207, 473, 464, 659, 36, 671, 2, 599, 623, 797, 624, 913, 517, 219, 301, 932, 658, 802, 496, 904, 679, 947, 969, 332, 135, 901, 384, 767, 211, 807, 958, 810, 711, 156, 155, 306, 528, 27, 516, 719, 194, 299, 472, 628, 106, 142, 346, 229, 770, 315, 94, 460, 289, 323, 327, 684, 830, 322, 232, 1, 331, 912, 784, 284, 206, 601, 31, 49, 708, 900, 318, 787, 861, 40, 394, 335, 843, 724, 205, 939, 827, 545, 821, 253, 762, 703, 128, 209, 54, 336, 594, 848, 93, 146, 744, 25, 779, 568, 117, 515, 424, 718, 63, 311, 337, 921, 683, 398, 727, 740, 752, 691, 783, 896, 410, 504, 519, 749, 325, 564, 580, 816, 73, 801, 578, 235, 883, 757, 811, 24, 38, 300, 829, 136, 789, 141, 777, 834, 518, 433, 741, 795, 463, 850, 555, 751, 546, 773, 130, 210, 248, 497, 869, 799, 548, 50, 650, 701, 842, 828, 575, 971, 571, 694, 839, 514, 288, 826, 887, 512, 366, 747, 10, 895, 855, 491, 909, 506, 397, 889, 144, 815, 800, 554, 734, 426, 112, 910, 149, 693, 957, 880, 500, 503, 822, 776, 52, 392, 481, 760, 888, 919, 945, 391, 836, 67, 882, 941, 951, 851, 639, 257, 308, 627, 574, 859, 938, 59, 956, 952, 955, 647, 231, 656, 116, 915, 449, 911, 928, 191, 907, 780, 448, 445, 856, 455, 303, 511, 409, 55, 906, 918, 447, 487, 314, 490, 917, 794, 881, 936, 905, 857, 873, 899, 750, 362, 657, 646, 8, 305, 558, 645, 935, 967, 949, 858, 446, 399, 338, 324, 793, 115, 868, 57, 114, 510, 743, 56, 640, 964, 970, 677, 742, 775, 638, 567, 717, 731, 563, 562, 0, 774};
			//166205. And after 7h andn 40+ minutes, no improvement...
			int[] starting=new int[] {246, 202, 692, 466, 963, 28, 295, 524, 225, 451, 78, 853, 737, 276, 682, 103, 388, 476, 475, 70, 485, 20, 285, 600, 265, 51, 158, 709, 641, 107, 644, 74, 924, 133, 746, 439, 15, 177, 242, 321, 414, 293, 5, 291, 100, 45, 499, 721, 181, 143, 724, 886, 818, 620, 139, 43, 664, 678, 260, 798, 120, 369, 333, 916, 313, 946, 125, 930, 866, 105, 480, 395, 84, 368, 44, 509, 400, 153, 261, 420, 523, 892, 83, 406, 716, 431, 576, 80, 81, 785, 442, 441, 241, 450, 425, 588, 255, 674, 865, 617, 479, 549, 488, 226, 286, 648, 926, 386, 46, 408, 813, 89, 142, 654, 237, 698, 673, 91, 268, 275, 954, 64, 532, 838, 193, 90, 728, 213, 249, 872, 725, 723, 217, 769, 224, 164, 833, 469, 270, 465, 569, 923, 88, 950, 530, 4, 3, 377, 92, 415, 222, 560, 943, 189, 151, 176, 407, 840, 274, 19, 259, 138, 430, 819, 953, 920, 190, 110, 132, 584, 914, 296, 267, 786, 706, 358, 352, 745, 699, 269, 898, 730, 817, 354, 6, 82, 581, 376, 319, 577, 182, 283, 353, 344, 461, 595, 228, 264, 99, 631, 339, 823, 87, 330, 238, 484, 782, 122, 607, 154, 561, 893, 216, 619, 867, 525, 929, 845, 732, 251, 538, 438, 681, 162, 688, 351, 434, 350, 65, 14, 670, 879, 215, 208, 748, 131, 495, 271, 539, 272, 266, 965, 435, 820, 48, 375, 754, 273, 715, 302, 483, 633, 102, 147, 796, 121, 187, 180, 119, 837, 98, 307, 42, 104, 579, 944, 108, 309, 170, 186, 250, 97, 573, 145, 233, 871, 101, 735, 343, 263, 161, 635, 665, 542, 417, 864, 973, 498, 875, 7, 405, 454, 396, 781, 458, 972, 252, 643, 508, 201, 908, 412, 169, 401, 854, 41, 200, 738, 85, 937, 290, 925, 234, 697, 860, 505, 874, 328, 609, 589, 86, 492, 689, 23, 364, 220, 598, 713, 175, 457, 280, 183, 770, 675, 329, 214, 374, 714, 199, 940, 178, 39, 547, 184, 245, 809, 831, 96, 566, 771, 198, 470, 456, 188, 218, 53, 223, 541, 652, 428, 804, 680, 587, 203, 130, 427, 281, 382, 531, 365, 662, 68, 808, 357, 21, 126, 124, 565, 437, 378, 551, 418, 632, 591, 244, 77, 687, 755, 58, 340, 618, 927, 759, 968, 243, 790, 349, 355, 356, 494, 12, 962, 903, 870, 310, 294, 419, 76, 432, 171, 9, 597, 118, 379, 704, 852, 24, 71, 586, 326, 363, 197, 17, 792, 493, 616, 195, 552, 513, 277, 109, 902, 825, 613, 106, 72, 165, 160, 279, 129, 123, 526, 696, 489, 486, 35, 695, 556, 95, 736, 844, 370, 111, 34, 814, 621, 961, 179, 403, 540, 334, 803, 846, 642, 522, 174, 157, 608, 612, 510, 429, 11, 537, 596, 348, 661, 371, 764, 236, 173, 553, 606, 847, 69, 521, 79, 590, 33, 185, 768, 667, 520, 605, 134, 543, 373, 702, 765, 292, 347, 262, 649, 666, 163, 559, 585, 172, 686, 878, 29, 342, 669, 625, 501, 533, 341, 805, 536, 806, 849, 535, 422, 372, 710, 685, 239, 720, 629, 630, 922, 663, 196, 367, 544, 389, 381, 361, 948, 835, 557, 168, 192, 791, 140, 660, 26, 278, 152, 555, 974, 359, 316, 931, 758, 651, 622, 436, 404, 212, 653, 127, 385, 413, 37, 166, 148, 712, 877, 474, 891, 459, 529, 890, 416, 22, 75, 393, 471, 615, 812, 47, 700, 462, 411, 137, 626, 841, 761, 592, 423, 167, 380, 583, 611, 690, 942, 335, 443, 570, 593, 467, 534, 582, 477, 312, 298, 478, 113, 604, 468, 778, 756, 772, 16, 13, 345, 482, 227, 320, 240, 959, 204, 421, 317, 66, 933, 824, 256, 402, 30, 444, 788, 885, 705, 221, 527, 603, 150, 62, 884, 306, 634, 61, 304, 360, 753, 502, 876, 610, 636, 247, 637, 862, 672, 602, 832, 707, 297, 387, 655, 614, 159, 32, 960, 668, 726, 254, 711, 156, 155, 60, 528, 766, 763, 440, 719, 230, 729, 739, 966, 258, 550, 934, 507, 424, 517, 207, 473, 464, 659, 36, 671, 2, 599, 623, 797, 624, 913, 572, 219, 301, 932, 658, 802, 897, 904, 679, 947, 969, 332, 135, 901, 384, 767, 211, 807, 958, 810, 194, 299, 472, 628, 287, 383, 346, 676, 229, 282, 315, 94, 460, 289, 323, 327, 684, 830, 322, 232, 1, 331, 912, 894, 27, 516, 784, 284, 206, 601, 31, 49, 708, 900, 318, 787, 861, 40, 394, 390, 843, 722, 205, 939, 827, 545, 821, 253, 762, 703, 146, 209, 54, 336, 594, 848, 93, 452, 744, 25, 779, 568, 117, 515, 718, 63, 311, 337, 921, 683, 398, 727, 740, 752, 691, 783, 896, 410, 504, 519, 749, 325, 580, 816, 73, 801, 578, 235, 883, 757, 811, 18, 38, 300, 829, 453, 136, 789, 141, 777, 834, 518, 433, 741, 795, 463, 850, 496, 751, 546, 773, 288, 210, 248, 497, 869, 799, 548, 50, 650, 701, 842, 828, 571, 694, 839, 514, 128, 826, 887, 575, 863, 512, 366, 747, 10, 895, 855, 491, 909, 506, 397, 889, 144, 815, 800, 511, 734, 426, 112, 910, 149, 693, 957, 880, 500, 503, 822, 776, 52, 392, 481, 760, 888, 919, 945, 391, 836, 67, 882, 941, 951, 851, 639, 257, 308, 627, 574, 859, 938, 59, 956, 952, 955, 647, 231, 656, 116, 915, 449, 911, 928, 191, 445, 780, 448, 907, 856, 455, 303, 554, 409, 55, 906, 918, 447, 487, 314, 971, 917, 794, 881, 936, 905, 857, 873, 899, 750, 362, 657, 646, 8, 305, 558, 645, 935, 967, 949, 858, 399, 338, 324, 793, 115, 868, 57, 114, 446, 490, 743, 56, 640, 964, 970, 677, 742, 775, 638, 567, 564, 717, 731, 733, 563, 562, 0, 774};
			int cost=mutator.getCost(starting);
			population.insert(starting,cost);
			boolean initBig=false;
			if (initBig) for (int i=0;i<starting.length;++i) for (int j=i+1;j<starting.length;++j)	{
				int[] element=mutator.mutate2(starting,i,j);
				cost=mutator.getCost(element);
				population.insert(element,cost);
			}
		}
		long nextToShow=100000;
		for (long i=0;;++i)	{
			int[] newArrangement=mutator.mutateRandom(population.getRandomElement(r),r);
			int cost=mutator.getCost(newArrangement);
			population.insert(newArrangement,cost);
			if (i==nextToShow)	{
				StringBuilder sb=new StringBuilder();
				sb.append("Current stage: ").append(i).append(". Current best cost: ").append(population.getBestCost()).append('.');
				System.out.println(sb.toString());
				System.out.println(population.getBestElement());
				nextToShow+=100000;
			}
		}
	}
}
